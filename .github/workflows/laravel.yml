name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Laravel Development and Testing
  laravel-development-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: music
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, bcmath, pdo_mysql
          ini-values: post_max_size=256M, max_execution_time=300
          tools: composer

      - name: Check PHP Version and Extensions
        run: |
          php -v
          php -m

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Validate .env File
        run: |
          if [ ! -f .env ]; then echo ".env file is missing"; exit 1; fi

      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Generate Application Key
        run: php artisan key:generate --verbose

      - name: Set Directory Permissions
        run: sudo chmod -R 777 storage bootstrap/cache

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get install -y mysql-client
          until mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Waiting for database connection..."
            sleep 5
          done

      - name: Run Migrations and Seeders
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: music
          DB_USERNAME: root
          DB_PASSWORD: ""
          APP_ENV: testing
        run: php artisan migrate:fresh --seed

      - name: Run Tests
        run: php artisan test --verbose

      - name: Upload Application Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: laravel-app
          path: .

  # Job 2: Node.js Build and Upload Artifacts
  node-build:
    runs-on: ubuntu-latest
    needs: laravel-development-test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build assets with Vite
        run: npm run build

      - name: Upload Node.js Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node-build
          path: public/build

  # Job 3: Build and Push Docker Image
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [laravel-development-test, node-build]

    steps:
      - uses: actions/checkout@v4

      - name: Download Application Artifacts
        uses: actions/download-artifact@v3
        with:
          name: laravel-app
          path: . # Extract the artifacts to the current directory

      - name: Download Node.js Artifacts
        uses: actions/download-artifact@v3
        with:
          name: node-build
          path: public/build # Ensure the build assets are placed in the correct location

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: slimmerik/deployment-test

      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
